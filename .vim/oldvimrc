" Old vim settings that I currently do not use

NeoBundle 'Shougo/unite.vim'
	" Use Ag (Silver Searcher) instead of grep when using Unite's search feature
	if executable('ag')
		let g:unite_source_grep_command='ag'
		let g:unite_source_grep_default_opts = '--line-numbers --nocolor --nogroup --hidden'
		let g:unite_source_grep_recursive_opt=''
	endif

	" Ignore the following files/directories
	call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
				\ 'ignore_pattern', join([
				\ '\.git/',
				\ '\.svn/',
				\ '\.hg/',
				\ '*.swp',
				\ '*.bak',
				\ '*.pyc',
				\ '*.class',
				\ '*.so',
				\ ], '\|'))

	" Enable fuzzy matching
	call unite#filters#matcher_default#use(['matcher_fuzzy'])

	" Enable rank sorter
	call unite#filters#sorter_default#use(['sorter_rank'])

	let g:unite_split_rule = "botright"
	let g:unite_force_overwrite_statusline = 0
	let g:unite_winheight = 10

	autocmd FileType unite call s:unite_settings()

	function! s:unite_settings()
		imap <buffer> <ESC> <Plug>(unite_exit)

		imap <buffer> <C-j> <Plug>(unite_select_next_line)
		imap <buffer> <C-k> <Plug>(unite_select_previous_line)
		imap <silent><buffer><expr> <C-x> unite#do_action('split')
		imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
	endfunction

NeoBundle 'Shougo/vimproc', {
	\ 'build' : {
	\	  'windows' : 'make -f make_mingw32.mak',
	\	  'cygwin' : 'make -f make_cygwin.mak',
	\	  'mac' : 'make -f make_mac.mak',
	\	  'unix' : 'make -f make_unix.mak',
	\	 },
	\ }

NeoBundle 'Shougo/neosnippet'
	if has("win16") || has("win32") || has("win64")
		let g:neosnippet#snippets_directory='$VIM/snippets'
	else
		let g:neosnippet#snippets_directory='~/.vim/snippets'
	endif

	" For snippet_complete marker.
	if has('conceal')
	  set conceallevel=2 concealcursor=i
	endif

	" Maps <TAB> to expand or jump the neosnippet
	imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
	\ "\<Plug>(neosnippet_expand_or_jump)"
	\: pumvisible() ? "\<C-n>" : "\<TAB>"
	smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
	\ "\<Plug>(neosnippet_expand_or_jump)"
	\: "\<TAB>"

NeoBundle 'Shougo/neosnippet-snippets'

" Find the working directory's root
function! FindProjectRoot(lookFor)
	let pathMaker='%:p'
	while(len(expand(pathMaker))>len(expand(pathMaker.':h')))
		let pathMaker=pathMaker.':h'
		let fileToCheck=expand(pathMaker).'/'.a:lookFor
		if filereadable(fileToCheck)||isdirectory(fileToCheck)
			return expand(pathMaker)
		endif
	endwhile
	return 0
endfunction
let g:project_root=FindProjectRoot('.git')
let g:project_root_include=g:project_root
let g:project_root_include.='/*'

" C++ autocompletion with NeoComplete
NeoBundle 'osyo-manga/vim-reunions'
NeoBundle 'osyo-manga/vim-marching'
	let g:marching_clang_command = "clang++"
	let g:marching_clang_command_option="-std=c++11"

	let g:marching_include_paths = filter(
		\	split(glob(g:project_root_include), '\n') +
		\	split(glob('/usr/local/include/*'), '\n') +
		\	split(glob('/usr/include/c++/*'), '\n') +
		\	split(glob('/usr/include/c++/*/*'), '\n') +
		\	split(glob('/usr/include/*/c++/*'), '\n'),
		\	'isdirectory(v:val)')
	let g:marching_enable_neocomplete = 1

	if !exists('g:neocomplete#force_omni_input_patterns')
	  let g:neocomplete#force_omni_input_patterns = {}
	endif

	let g:neocomplete#force_omni_input_patterns.c =
		    \ '[^.[:digit:] *\t]\%(\.\|->\)'
	let g:neocomplete#force_omni_input_patterns.cpp =
		\ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'

	imap <buffer> <C-x><C-o> <Plug>(marching_start_omni_complete)
	imap <buffer> <C-x><C-x><C-o> <Plug>(marching_force_start_omni_complete)

" Find file with pattern (Leader + (a)g)
nnoremap <leader>a :<C-u>Unite grep:.<cr>

" Find every file with the pattern on cursor (Leader + (a)g)
nnoremap <leader>A :<C-u>execute 'Unite grep:.::' . expand("<cword>") . ' '<cr>

" Switch buffers fast (Leader + (b)uffer)
nnoremap <leader>b :<C-u>Unite -quick-match buffer<cr>

